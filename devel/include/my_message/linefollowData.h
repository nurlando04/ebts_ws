// Generated by gencpp from file my_message/linefollowData.msg
// DO NOT EDIT!


#ifndef MY_MESSAGE_MESSAGE_LINEFOLLOWDATA_H
#define MY_MESSAGE_MESSAGE_LINEFOLLOWDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace my_message
{
template <class ContainerAllocator>
struct linefollowData_
{
  typedef linefollowData_<ContainerAllocator> Type;

  linefollowData_()
    : mean_squared_error(0.0)
    , y_desired(0.0)
    , y_sensed(0.0)
    , wave(0.0)
    , numoftrial(0)  {
    }
  linefollowData_(const ContainerAllocator& _alloc)
    : mean_squared_error(0.0)
    , y_desired(0.0)
    , y_sensed(0.0)
    , wave(0.0)
    , numoftrial(0)  {
  (void)_alloc;
    }



   typedef float _mean_squared_error_type;
  _mean_squared_error_type mean_squared_error;

   typedef float _y_desired_type;
  _y_desired_type y_desired;

   typedef float _y_sensed_type;
  _y_sensed_type y_sensed;

   typedef float _wave_type;
  _wave_type wave;

   typedef int32_t _numoftrial_type;
  _numoftrial_type numoftrial;





  typedef boost::shared_ptr< ::my_message::linefollowData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::my_message::linefollowData_<ContainerAllocator> const> ConstPtr;

}; // struct linefollowData_

typedef ::my_message::linefollowData_<std::allocator<void> > linefollowData;

typedef boost::shared_ptr< ::my_message::linefollowData > linefollowDataPtr;
typedef boost::shared_ptr< ::my_message::linefollowData const> linefollowDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::my_message::linefollowData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::my_message::linefollowData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::my_message::linefollowData_<ContainerAllocator1> & lhs, const ::my_message::linefollowData_<ContainerAllocator2> & rhs)
{
  return lhs.mean_squared_error == rhs.mean_squared_error &&
    lhs.y_desired == rhs.y_desired &&
    lhs.y_sensed == rhs.y_sensed &&
    lhs.wave == rhs.wave &&
    lhs.numoftrial == rhs.numoftrial;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::my_message::linefollowData_<ContainerAllocator1> & lhs, const ::my_message::linefollowData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace my_message

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::my_message::linefollowData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_message::linefollowData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_message::linefollowData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_message::linefollowData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_message::linefollowData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_message::linefollowData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::my_message::linefollowData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7500abf145475ff7fe18c643285d1df5";
  }

  static const char* value(const ::my_message::linefollowData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7500abf145475ff7ULL;
  static const uint64_t static_value2 = 0xfe18c643285d1df5ULL;
};

template<class ContainerAllocator>
struct DataType< ::my_message::linefollowData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "my_message/linefollowData";
  }

  static const char* value(const ::my_message::linefollowData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::my_message::linefollowData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 mean_squared_error\n"
"float32 y_desired\n"
"float32 y_sensed\n"
"float32 wave\n"
"int32 numoftrial\n"
;
  }

  static const char* value(const ::my_message::linefollowData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::my_message::linefollowData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mean_squared_error);
      stream.next(m.y_desired);
      stream.next(m.y_sensed);
      stream.next(m.wave);
      stream.next(m.numoftrial);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct linefollowData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::my_message::linefollowData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::my_message::linefollowData_<ContainerAllocator>& v)
  {
    s << indent << "mean_squared_error: ";
    Printer<float>::stream(s, indent + "  ", v.mean_squared_error);
    s << indent << "y_desired: ";
    Printer<float>::stream(s, indent + "  ", v.y_desired);
    s << indent << "y_sensed: ";
    Printer<float>::stream(s, indent + "  ", v.y_sensed);
    s << indent << "wave: ";
    Printer<float>::stream(s, indent + "  ", v.wave);
    s << indent << "numoftrial: ";
    Printer<int32_t>::stream(s, indent + "  ", v.numoftrial);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MY_MESSAGE_MESSAGE_LINEFOLLOWDATA_H
