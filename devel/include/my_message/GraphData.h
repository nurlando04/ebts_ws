// Generated by gencpp from file my_message/GraphData.msg
// DO NOT EDIT!


#ifndef MY_MESSAGE_MESSAGE_GRAPHDATA_H
#define MY_MESSAGE_MESSAGE_GRAPHDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace my_message
{
template <class ContainerAllocator>
struct GraphData_
{
  typedef GraphData_<ContainerAllocator> Type;

  GraphData_()
    : ms_error(0.0)
    , force_desired(0.0)
    , force_event(0.0)
    , force_weiss(0.0)
    , force_robot(0.0)
    , force_weiss2(0.0)
    , delta_z(0.0)
    , desire_ar(0.0)
    , sense_ar(0.0)  {
    }
  GraphData_(const ContainerAllocator& _alloc)
    : ms_error(0.0)
    , force_desired(0.0)
    , force_event(0.0)
    , force_weiss(0.0)
    , force_robot(0.0)
    , force_weiss2(0.0)
    , delta_z(0.0)
    , desire_ar(0.0)
    , sense_ar(0.0)  {
  (void)_alloc;
    }



   typedef float _ms_error_type;
  _ms_error_type ms_error;

   typedef double _force_desired_type;
  _force_desired_type force_desired;

   typedef float _force_event_type;
  _force_event_type force_event;

   typedef double _force_weiss_type;
  _force_weiss_type force_weiss;

   typedef float _force_robot_type;
  _force_robot_type force_robot;

   typedef double _force_weiss2_type;
  _force_weiss2_type force_weiss2;

   typedef double _delta_z_type;
  _delta_z_type delta_z;

   typedef float _desire_ar_type;
  _desire_ar_type desire_ar;

   typedef float _sense_ar_type;
  _sense_ar_type sense_ar;





  typedef boost::shared_ptr< ::my_message::GraphData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::my_message::GraphData_<ContainerAllocator> const> ConstPtr;

}; // struct GraphData_

typedef ::my_message::GraphData_<std::allocator<void> > GraphData;

typedef boost::shared_ptr< ::my_message::GraphData > GraphDataPtr;
typedef boost::shared_ptr< ::my_message::GraphData const> GraphDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::my_message::GraphData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::my_message::GraphData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::my_message::GraphData_<ContainerAllocator1> & lhs, const ::my_message::GraphData_<ContainerAllocator2> & rhs)
{
  return lhs.ms_error == rhs.ms_error &&
    lhs.force_desired == rhs.force_desired &&
    lhs.force_event == rhs.force_event &&
    lhs.force_weiss == rhs.force_weiss &&
    lhs.force_robot == rhs.force_robot &&
    lhs.force_weiss2 == rhs.force_weiss2 &&
    lhs.delta_z == rhs.delta_z &&
    lhs.desire_ar == rhs.desire_ar &&
    lhs.sense_ar == rhs.sense_ar;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::my_message::GraphData_<ContainerAllocator1> & lhs, const ::my_message::GraphData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace my_message

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::my_message::GraphData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_message::GraphData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_message::GraphData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_message::GraphData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_message::GraphData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_message::GraphData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::my_message::GraphData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ba85a4112f52168dcee52ccd937505d2";
  }

  static const char* value(const ::my_message::GraphData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xba85a4112f52168dULL;
  static const uint64_t static_value2 = 0xcee52ccd937505d2ULL;
};

template<class ContainerAllocator>
struct DataType< ::my_message::GraphData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "my_message/GraphData";
  }

  static const char* value(const ::my_message::GraphData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::my_message::GraphData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 ms_error \n"
"float64 force_desired\n"
"float32 force_event\n"
"float64 force_weiss\n"
"float32 force_robot\n"
"float64 force_weiss2\n"
"float64 delta_z\n"
"float32 desire_ar\n"
"float32 sense_ar\n"
;
  }

  static const char* value(const ::my_message::GraphData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::my_message::GraphData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ms_error);
      stream.next(m.force_desired);
      stream.next(m.force_event);
      stream.next(m.force_weiss);
      stream.next(m.force_robot);
      stream.next(m.force_weiss2);
      stream.next(m.delta_z);
      stream.next(m.desire_ar);
      stream.next(m.sense_ar);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GraphData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::my_message::GraphData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::my_message::GraphData_<ContainerAllocator>& v)
  {
    s << indent << "ms_error: ";
    Printer<float>::stream(s, indent + "  ", v.ms_error);
    s << indent << "force_desired: ";
    Printer<double>::stream(s, indent + "  ", v.force_desired);
    s << indent << "force_event: ";
    Printer<float>::stream(s, indent + "  ", v.force_event);
    s << indent << "force_weiss: ";
    Printer<double>::stream(s, indent + "  ", v.force_weiss);
    s << indent << "force_robot: ";
    Printer<float>::stream(s, indent + "  ", v.force_robot);
    s << indent << "force_weiss2: ";
    Printer<double>::stream(s, indent + "  ", v.force_weiss2);
    s << indent << "delta_z: ";
    Printer<double>::stream(s, indent + "  ", v.delta_z);
    s << indent << "desire_ar: ";
    Printer<float>::stream(s, indent + "  ", v.desire_ar);
    s << indent << "sense_ar: ";
    Printer<float>::stream(s, indent + "  ", v.sense_ar);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MY_MESSAGE_MESSAGE_GRAPHDATA_H
