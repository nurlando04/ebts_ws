# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from my_message/GraphData.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GraphData(genpy.Message):
  _md5sum = "ba85a4112f52168dcee52ccd937505d2"
  _type = "my_message/GraphData"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 ms_error 
float64 force_desired
float32 force_event
float64 force_weiss
float32 force_robot
float64 force_weiss2
float64 delta_z
float32 desire_ar
float32 sense_ar
"""
  __slots__ = ['ms_error','force_desired','force_event','force_weiss','force_robot','force_weiss2','delta_z','desire_ar','sense_ar']
  _slot_types = ['float32','float64','float32','float64','float32','float64','float64','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       ms_error,force_desired,force_event,force_weiss,force_robot,force_weiss2,delta_z,desire_ar,sense_ar

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GraphData, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.ms_error is None:
        self.ms_error = 0.
      if self.force_desired is None:
        self.force_desired = 0.
      if self.force_event is None:
        self.force_event = 0.
      if self.force_weiss is None:
        self.force_weiss = 0.
      if self.force_robot is None:
        self.force_robot = 0.
      if self.force_weiss2 is None:
        self.force_weiss2 = 0.
      if self.delta_z is None:
        self.delta_z = 0.
      if self.desire_ar is None:
        self.desire_ar = 0.
      if self.sense_ar is None:
        self.sense_ar = 0.
    else:
      self.ms_error = 0.
      self.force_desired = 0.
      self.force_event = 0.
      self.force_weiss = 0.
      self.force_robot = 0.
      self.force_weiss2 = 0.
      self.delta_z = 0.
      self.desire_ar = 0.
      self.sense_ar = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_fdfdf2d2f().pack(_x.ms_error, _x.force_desired, _x.force_event, _x.force_weiss, _x.force_robot, _x.force_weiss2, _x.delta_z, _x.desire_ar, _x.sense_ar))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 52
      (_x.ms_error, _x.force_desired, _x.force_event, _x.force_weiss, _x.force_robot, _x.force_weiss2, _x.delta_z, _x.desire_ar, _x.sense_ar,) = _get_struct_fdfdf2d2f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_fdfdf2d2f().pack(_x.ms_error, _x.force_desired, _x.force_event, _x.force_weiss, _x.force_robot, _x.force_weiss2, _x.delta_z, _x.desire_ar, _x.sense_ar))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 52
      (_x.ms_error, _x.force_desired, _x.force_event, _x.force_weiss, _x.force_robot, _x.force_weiss2, _x.delta_z, _x.desire_ar, _x.sense_ar,) = _get_struct_fdfdf2d2f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_fdfdf2d2f = None
def _get_struct_fdfdf2d2f():
    global _struct_fdfdf2d2f
    if _struct_fdfdf2d2f is None:
        _struct_fdfdf2d2f = struct.Struct("<fdfdf2d2f")
    return _struct_fdfdf2d2f
